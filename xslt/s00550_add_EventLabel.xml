<?xml version="1.0" encoding="UTF-8"?>
<!--

  Handle assignments to nextState guarded by if statements 

-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

    <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes" />
    <!--   
    <xsl:output method="html" encoding="UTF-8" />
     -->
    <xsl:strip-space elements="*" />

  <xsl:template match="*[@NextStateLabel]">

    <xsl:variable name="EventType">
      <!-- locate first (any) enclosing context
      that tests EventType (such as some if statement) -->
      <xsl:for-each
        select="
                ancestor::*[@EventTypeTest][1]
      ">
        <!-- inside the first enclosing context that tests EventType take the value it is tested
        against -->
        
        <xsl:choose>
            <xsl:when test="@CascadeLabel">
                <xsl:value-of select="@CascadeLabel" />
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="@EventTypeTest" />
            </xsl:otherwise>
        </xsl:choose>
        
      </xsl:for-each>
    </xsl:variable>

    <xsl:variable name="EventParam">
      <!-- locate first (any) enclosing context 
      (still inside a switch statement case block) 
      that tests EventParam (such as some if statement)
      
        ancestor::*[@EventParamTest][1]
      
       -->
      <xsl:for-each
        select="
                ancestor::*[@EventParamTest][1]
      ">
        <!-- inside the enclosing context that tests EventParam take the name of what it is tested
        against -->
        <xsl:value-of
          select="
                @EventParamTest
        " />
      </xsl:for-each>
    </xsl:variable>

    <xsl:variable name="EventLabel">
      <xsl:choose>
        <xsl:when test=" normalize-space($EventParam)='' ">
          <xsl:copy-of select="normalize-space($EventType)" />
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>(</xsl:text>
          <xsl:copy-of select="normalize-space($EventType)" />
          <xsl:text>)</xsl:text>
          <xsl:text>(</xsl:text>
          <xsl:copy-of select="normalize-space($EventParam)" />
          <xsl:text>)</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:copy>
        <xsl:apply-templates select="@*" />
        <xsl:attribute name="EventLabel">
            <xsl:copy-of select="$EventLabel"/>
        </xsl:attribute>

        <xsl:apply-templates select="node()" />
    </xsl:copy>

  </xsl:template>

  <!-- identity transform - copy all input nodes to output -->
  <xsl:template match="@*|node()">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()" />
    </xsl:copy>
  </xsl:template>

</xsl:stylesheet>
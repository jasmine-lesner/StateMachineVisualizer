<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="2.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:set="http://exslt.org/sets"
    xmlns:str="http://exslt.org/strings"
    xmlns:common="http://exslt.org/common">

    <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes" />
    <!--   
    <xsl:output method="html" encoding="UTF-8" />
     -->
    <xsl:strip-space elements="*" />

    <xsl:template match="@*|node()">
        <xsl:copy>
            <xsl:apply-templates select="@*|node()"/>
        </xsl:copy>
    </xsl:template>


    <!-- Handle first case with a break within a block 
            
    -->
    <xsl:template match="
        block_items[
            (@class='Case' 
            or @class='Default')
            and not(
                preceding-sibling::block_items[
                    @class='Case'
                ]
                /stmts[
                    @class='Break'
                ]
            )
        ]">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>

            <xsl:for-each select=" 
                preceding-sibling::block_items[
                    @class='Case'
                    and not(
                        stmts[
                            @class='Break'
                        ]
                    )
                ]
            ">
                <xsl:element name="CascadeElement">
                    <xsl:attribute name="name">
                        <xsl:value-of select="./expr[@class='ID']/@name"/>
                    </xsl:attribute>
                </xsl:element>
            </xsl:for-each>

            <xsl:apply-templates select="node()"/>

        </xsl:copy>
    </xsl:template>

    <!-- Handle any case with a break when it is preceeded by a case with a break 
    
    -->
    <xsl:template match="
        block_items[
            (@class='Case' 
            or @class='Default')
            and (
                preceding-sibling::block_items[
                    @class='Case'
                ]
                /stmts[
                    @class='Break'
                ]
            )
        ]">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:for-each select=" 
                    preceding-sibling::block_items[
                        @class='Case'
                        and stmts[ @class='Break' ]
                    ][1]/following-sibling::block_items[
                        @class='Case'
                        and not(
                            stmts[
                                @class='Break'
                            ]
                        )
                    ]
                intersect
                    preceding-sibling::block_items[
                        @class='Case'
                        and not(
                            stmts[
                                @class='Break'
                            ]
                        )
                    ]
            ">
                <xsl:element name="CascadeElement">
                    <xsl:attribute name="name">
                        <xsl:value-of select="./expr[@class='ID']/@name"/>
                    </xsl:attribute>
                </xsl:element>
            </xsl:for-each>

            <xsl:apply-templates select="node()"/>

        </xsl:copy>
    </xsl:template>

    


</xsl:stylesheet>
